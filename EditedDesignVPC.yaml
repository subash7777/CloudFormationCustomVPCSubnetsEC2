Resources:
  #Creating a VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
  
  # Creating an Internet Gatewayy
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: {}
  
  # Attaching Gateway and VPC
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  
  # Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
  
  # Private Subnet
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      
  # Public Route Table
  PubRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  
  # Public Route
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PubRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  # Associating Route Table with Public Subnet
  PubSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PubRouteTable
      SubnetId: !Ref PublicSubnet
  
  # Defining Public Security Group
  PubSecuritygrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Public Security groupG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  
  # Public EC2 in Public Subnet, associating Public Security Group and defining dependancy with Public Route Table 
  PublicEC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "ami-01cc34ab2709337aa"
      KeyName: "vpctest"
      InstanceType: "t2.micro"
      NetworkInterfaces:
        - SubnetId: !Ref PublicSubnet
          DeviceIndex: '0'
          AssociatePublicIpAddress: "true"
          GroupSet:
            - !Ref PubSecuritygrp
        
    DependsOn:
      - PubRouteTable
  
  # NAT Gateway for EC2 in Private subnet to access connectivity. Creating Elastic IP and attaching it to NAT Gateway 
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: VPCGatewayAttachment

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
  
  # Private Security Group
  PriSecuritygrp:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Private SecurityGroup
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.0.0/24

  #Private Route Table
  PriRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  
  # Private Route  
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PriRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  # Associating Route Table with Private Subnet
  PriSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PriRouteTable

  #Private EC2 in Private Subnet, associating Private Security Group and defining dependancy with Private Route Table 
  PrivateEC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "ami-01cc34ab2709337aa"
      InstanceType: "t2.micro"
      KeyName: "vpctest"
      NetworkInterfaces:
        - SubnetId: !Ref PrivateSubnet
          DeviceIndex: '0'
          GroupSet:
          - !Ref PriSecuritygrp        
    DependsOn:
      - PriRouteTable
